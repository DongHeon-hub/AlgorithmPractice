큐
먼저 들어간게 먼저 나옴 ex) 공항 입국수속

LIFO(last in last out) 구조임

큐 성질

1. 원소의 추가 O(1)
2. 원소의 제거 O(1)
3. 제일 앞/뒤의 원소 확인이 O(1)
4. 제일 앞/뒤가 아닌 나머지 원소들의 확인/변경이 원칙적으로 불가능

큐 구현

const int mx=1000005;
int dat[mx];
int head=0, tail=0;

큐 같은 경우 삽입, 삭제가 일어날 때마다 head, tail값이 증가만 함. -> 쓸데없는 공간이 계속 생김
이를 해결하기 위해 circular queue를 사용하면 간단하게 해결할 수 있음

head == 0 , tail == 0

head == tail -> 비어있음

tail = (tail+1)%mx;
if(head == tail) q_full;

queue[tail] = num;


if(head == tail) q_empty;

head = (head+1)


