정렬
1. 기초정렬

가장 큰 거 뒤로
int arr[10] = {3,2,7,116,62,235,1,23,55,77};
int n = 10;
for(int i=n-1; i>0; i--){
    int mxidx = 0;
    for(int j=1; j<=i; j++) if(arr[mxidx] < arr[j]) mxidx=j;

    swap(arr[mxidx], arr[i]);
}

이떄 max_element stl을 사용하면 코드의 길이를 줄일 수 있다.
max_element(arr, arr+k)는 arr[0]~arr[k-1]까지 살펴본 후 최댓값의 원소의 주소를 반환하는 함수

for(int i=n-1; i>0; i--){
    swap(*max_element(arr,arr+i+1), arr[i]);
}

bubble sort

for(int i=0; i<n-1; i++){
    for(int j=1; j<n-i; j++){
        if(arr[j-1] > arr[j]) swap(arr[j-1], arr[j]);
    }
}


for(int i=0; i<n; i++){
    for(int j=0; j<n-1-i; j++){
        if(arr[j] > arr[j+1]) swap(arr[j], arr[j+1]);
    }
}

추가적으로 삽입 정렬이 존재한다.
모두 O(n^2)에 동작


2. Merge sort
-> 재귀적으로 수열을 나눠 정렬한 후 합치는 정렬법.
-> O(NlogN)

1. 먼저 길이가 N, M인 두 정렬된 리스트를 합쳐서
길이가 N+M인 정렬된 리스트를 만드는 방법을 알아야됨

{-9,1,6,8,12}
{-7,7,13,15}

각 수열에서 가장 앞의 것만 비교해서 채워 넣으면 됨.


-> 재귀로 접근
재귀?
1번 도미노가 쓰러진다.
k번 도미노가 쓰러지면 k+1번 도미노도 쓰러진다.

길이가 1인 리스트를 정렬할 수 있다.
길이가 N인 두 정렬된 리스트를 합칠 수 있다.
길이가 N인 리스트를 정렬할 수 있으면 길이가 2N인 리스트를 정렬할 수 있다.

* Stable sort란?

어떤 사람 a(21), b(21), c(21), d(38)을 나이순으로 정렬한다고 했을 때,
우선 순위가 같은 원소가 여러개일때는 정렬한 결과가 유일하지 않을 수 있다.

이때, 우선순위가 같은 원소들끼리는 원래의 순서를 따라가도록 하는것이 
Stable sort이다.

응용처

1. 파일들을 정렬하는 경우
- 파일들이 미리 시간의 오름차순으로 정렬하고 싶다고 해보자.
이 떄 파일을 크기순으로, 크기가 동일하다면 빨리 생성된 순으로 정렬하고 싶을때?

이 때 merge sort가 stable sort이므로 시간은 신경쓰지 않고 크기만으로 merge sort를 진행하면
된다.

2. 이차원 점들을 정렬할 때
좌표들을 x가 작은 순으로, x가 동일하다면 y가 작은 순으로 정렬하고 싶을 때?
y를 기준으로 merge_sort를 진행하고, x를 기준으로 merge sort를 진행
but merge함수에서 a[aidx], b[bidx]비교부분 살짝 바꾸면 됨


* Quick sort
만약 코테에서 stl 못쓰고 sort를 구현해야 할 경우 절대절대절대로 quick sort를 
구현하지 말고 merge sort를 구현해!!

quick sort도 merge_sort와 같이 재귀적으로 구현되는 정렬

매 단계마다 pivot이라고 이름 붙은 원소 하나를 제자리로
보내는 작업을 반복
이때 편의상 pivot은 가장 왼쪽에 위치한 원소를 가리킨다고 할 수 있다.
만약 다른 원소를 pivot이라고 하고싶으면 그냥 그 원소를 가장 왼쪽으로
보내면 되기 때문에 pivot은 항상 왼쪽이라고 생각.

pivot을 제자리로 보낸다는 말?
pivot을 올바른 자리에 넣고, pivot의 왼쪽은 pivot보다 작은 원소가,
오른쪽에는 pivot보다 큰 원소가 오게끔 하겠다는 의미

바로 생각해볼 수 있는 코드의
int arr[8] = {6,-8,1,12,8,3,7,-7};
int tmp[8];
int tidx=0;
int pivot = arr[0];
for(int i=1; i<8; i++){
    if(arr[i] <= pivot) tmp[tidx++] = arr[i];

tmp[tidx++]=pivot;

for(int i=1; i<8; i++) if(arr[i] > pivot) tmp[tidx++] = arr[i];

for(int i=0; i<8; i++) arr[i] = tmp[i];

O(N)

하지만 이 구현은 quick sort의 장점을 살릴수가 없다.
quick sort의 장점? 추가적인 메모리 공간을 사용하지 않는다.
+ 배열 안에서의 자리바꿈만으로 구현되므로 속도가 빠름(cachi hit rate)
이때 quick sort처럼 추가적인 메모리 공간을 사용하지 않는 정렬을
in-place sort라고 함

-> l,r 이라는 두개의 포인터로 해결
왜 pivot을 제자리로 보내냐?
->> 모든 순간에 l의 왼쪽에는 pivot보다 작거나 같은수만 있고,
    r의 오른 쪽에는 pivot보다 크거나 같은 값들만 있다.

int arr[8] = {6,-8,1,12,8,3,7,-7};
int pivot = arr[0];
int l=1;
int r=7;

while(1){
    while(l<=r && arr[l] <= pivot) l++;
    while(l<=r && arr[r] > pivot) r--;
    if(l>r) break;
    swap(arr[l], arr[r]);
}

swap(arr[0], arr[r]);

l과 r이 한칸씩 가까워지므로 O(N)

각 단계마다 대충 pivot이 중간쯤에 위치하게 된다고 하면 계속 둘씩 쪼개지게 되므로
시간 복잡도는 O(NlgN)

But 아주 치명적인 단점이 있다.

1 2 3 4 5 6 7 8 을 정렬 한다고 할 때

1 | 2 3 4 5 5 6 7 8 
1 2 | 3 4 5 5 6 7 8
1 2 3 | 4 5 6 7 8
1 2 3 4 | 5 6 7 8
1 2 3 4 5 | 6 7 8 
1 2 3 4 5 6 | 7 8
1 2 3 4 5 6 7 | 8
1 2 3 4 5 6 7 8

이때 pivot이 매번 중앙에 위치하는게 아닌 젤 왼쪽에 위치하게 돼,
단계가 lgN이 아닌 N이 됨
이 떄 시간 복잡도가 O(N^2)이 되버림

평균 : O(NlgN), 최악 O(N^2)

이것 때문에 stl이 없을 떄 quick sort를 쓰지 말란거


* Merge Sort vs Quick Sort
복잡도 : O(NlgN) vs O(NlgN), O(N^2)
overhead : O(N) vs O(1) (l, r등의 변수 사용)
stable Sort 여부 : O vs X