배열 - 메모리 상에 원소를 연속하게 배치한 자료구조.
자료구조로서의 배열이기 때문에 길이는 가변이어도 상관없다고 생각한다. 

배열의 성질
1. O(1)에 k번째 원소를 확인/변경 가능. 주소값을 바로 계산할 수 있기 때문에
2. overhead가 거의 없음
3. cache hit rate가 높음
4. 메모리 상에 연속한 구간을 잡아야 해서 할당에 제약이 걸림

* 임의의 위치 원소 확인/ 변경 : O(1)
* 마지막 원소 제거 / 삽입 : O(1)
* 임의의 위치에 원소 추가 : O(N) : 삽입 위치 뒤에 있는 원소들 모두 밀어야 하기 때문에
* 임의의 위치 원소 제거 : O(N) 삭제 뒤 원소들 앞으로 당겨야 하기 때문. 
 만약 당기지 않고 비워두면? 배열의 정의에도 위배 + k번째 원소를 O(1)에 찾을 수 없게 됨.


배열을 특정 값으로 한 번에 초기화 하고자 할 때 사용할 수 있는 방법들.

int a[21];
int b[21][21];

//1. memset -> 오류 발생 가능성이 커서 그다지 추천하지 않음

memset(a, 0, sizeof a)

//2 . for
for(int i=0; i<21; i++){
    for(int j=0; j<21; j++)
        b[i][j] = 0;
}

//3. fill (익숙해진다면 이 방법 추천)

fill(a, a+21, 0);
for(int i=0; i<21; i++) fill(b[i], b[i]+21, 0);


STL Vector // 배열과 달리, 크기를 마음대로 늘이거나 줄일 수 있다.

reference : cplusplus reference 에서 확인

vector<int> v1 = {1,2,3,4,5,7};


1. range-based for loop (since c++11)
for(int e : v1)
    cout << e << ' ';

이떄 int&e : v1 이라고 하면 e에 복사된 값이 아닌, 원본이 들어가 e의 값을 변경하면 vector v의 값도 바뀐다.

2. not based
for(int i=0; i<v1.size(); i++)
    cout << v1[i] << ' ';

// 3. **wrong**
for(int i=0; i<=v1.size()-1; i++){
    cout << v1[i] << ' ';
}

size() 메소드는 unsigned int를 반환 만약 빈 vector이면 overflow가 발생
