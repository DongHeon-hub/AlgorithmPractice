C++ 에는 미리 다양한 자료구조 및 알고리즘이 STL(Standard Template library)에 구현돼있어서, 필요한 자료구조를 직접 구현할 필요가 없이 가져다가 쓰면 된다.

1. Vector STL

vector : 가변배열, 크기를 마음대로 줄였다가 늘였다가 할 수 있다.
vector는 vector헤더에 선언돼있음.

// 선언 양식

vector<int> v(100) -> 타입이 int이고 0으로 초기화 된 100칸짜리 vector를 얻을 수 있다.
v[20]=10
v[60]=-4;
일반적인 배열처럼 인덱스에 접근해서 값을 변경할 수 있다.

함수에 넘기면 어떻게 될까?

void func1(vector<int> v){
    v[10]=7;
}

int main(){
    vector<int> v(100);
    func1(v);
    cout << v[10];
}

// 답은 0임. stl도 함수 인자로 넘기면 복사본을 만들어서 보내기 때문에 함수에서 값을 변경하더라도 main함수의 vector 원소의 값은 변함이 없다

bool cmp(vector<int> v1, vector<int> v2, int idx){
    return v1[idx] > v2[idx];
}

// 이 함수의 시간 복잡도는 O(N)임. vector를 함수에 넘기면 vector의 원소들을 복사해서 넣어야 하기 때문임. --> 이때 참조자 &를 이용하면 됨.

bool cmp2(vector<int>& v1, vector<int>& v2, int idx){
    return v1[idx] > v2[idx];
}
// O(1). 참조 대상의 주소 정보만 넘어감.

* 표준 입출력

c : scanf, printf
c++ : cin, cout

// 둘다 공백이 있는 문자열을 받기가 어려움. 해결책은 3가지 정도가 있고, 다음과 같다.


// 1. scanf의 옵션
char a[10];
scanf("%[^\n]", a);

// 2. gets 함수(보안상의 이유로 c++ 14 이상에서는 제거됨)

char a1[10];
gets(a1);
puts(a1);

// 3. getline 함수
string s;
getline(cin, s);
cout << s;
대신 type이 c++ string이어야 한다.


* cin / cout 에서 주의할 점이 있다. 입출력에서의 시간 초과를 막기 위해 다음과 같은 두 명령을 실행해야 한다.

1. ios::sync_with_stdio(false) 
// 기본적으로 C++ stream, C stream이 동기화 돼있다. 
하지만 C++ 로만 입력을 받는다면 굳이 동기화를 사용할 필요가 없기 때문에 동기화를 끊어 시간을 절약한다.
-> 절대 c. c++ 입출력함수 동기화하지 않기

2. cin.tie(nullptr)
// 온라인 judge 사이트에서는 입력, 순서 출력 순서가 꼬인다고 해도 결과적인 출력값만 확인해서 채점을 하기 때문에 상관이 없다. 
굳이 cin 전에 cout버퍼를 비울 필요가 없다.


* endl 절대 쓰지 말기. (채점 사이트에서는 상관x)

Tip !

1. 코딩테스트와 개발은 다르다 ***

- 코딩테스트는 남이 알아볼 수 있는 클린코드를 작성하는게 아님

2. 출력 맨 마지막 공백 혹은 줄바꿈이 추가로 있어도 상관이 없다.

3. 디버거는 굳이 사용하지 않아도 된다.
차라리 cout 이나 printf로 찍어서 하는거 권장하긴 하지만 필요하다 싶으면 디버거 사용해도 됨.