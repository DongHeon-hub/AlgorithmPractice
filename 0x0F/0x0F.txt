정렬II

1. 카운팅 정렬
1 5 4 2 3 1 4 3
이를 크기의 오름차순으로 정렬하고 싶을 때 어떻게 할까?

각 수의 등장횟수만 새서 출력

하지만 매우 크면 카운팅 소트를 쓸 수 없다.
-> 수의 범위가 한정적일 때만 사용가능

배열의 크기가 N이고 수의 범위를 K라고 할 때 정렬의 시간복잡도는 O(N+K)이다.

따라서 수의 범위가 제한적일 때는 굉장히 효율적


2. Radix Sort || 기수 정렬

- 자릿수를 이용해서 정렬을 수행하는 알고리즘, 카운팅 소트의 응용버전

- 자릿수의 최대 개수가 D라고 할 떄 D번에 걸쳐서 카운팅 소트를 하느 것과 상황이 똑같
리스트의 개수를 k개라고 할 때 O(D(N+K)) -> O(DN)

일반 배열로 구현하면 공간의 낭비가 심함
이걸 해결하려면 vector or linked list로 구현 해야함
근데 vector나 linked list나 stl 없이 직접구현은 시간이 걸리기 때문에
stl을 쓸 수 있는 상황에선 굳이? Radix sort를 쓸 필요가 없다

이 떄 하나 알아 갈것

p[i] 에 10의 i승을 넣고 싶다?

for(int i=1; i<d; i++) p10[i] = p10[i-1]*10;
 이게 정석임
 만약 pow(10, i)처럼 하면 실수 오차로 인해 꼬일 수 있다


 * Comparison sort, Non=Comparison sort
 머지,퀵, 버블 -> 비교 필요
 카운팅, 라딕스 -> 비교 필요 X


 * STL sort
 코테에서 정렬 직접 짜면 흑우다.

 int a[5] = {1,4,5,2,7};
 sort(a, a+5);

 vector<int> b = {1,4,5,2,7};
 sort(b.begin(), b.end()); // or sort(b.begin(), b.begin()+5);

 sort는 quick sort를 기반으로 함
 
 재귀가 너무 깊어지면? 다른 sort
 최악의 경우에도 O(nlogN)보장
 근데 이거 stable sort가 아니야

 꼭 stable_sort가 필요하다면
 stable_sort() 함수를 사용하면 됨.

 사용법은 일반 sort()와 같다.

 * pair, tuple에는 대소 관계가 이미 정해져있다.

 먼저 제일 앞의 원소를 비교하고, 값이 같으면 그 다음 원소의 값을 비교부분

 * stl sort는 비교함수를 내가 정해서 인자로 넘겨줄 수 있는 기능이 있다.

ex) int를 크기 순으로 정렬 -> 걍 하면 됨

근데 int를 5로 나눈 나머지 순으로, 같다면 크기 순으로 정렬하고 싶다

비교 함수 다음과 같이 만들어서 주면 됨

bool cmp(int a, int b){
    if(a%5 != b%5) return a%5 < b%5;
    return a < b;
}

a가 b의 앞에 와야할 때 true, 그렇지 않을 때 false 
이런식으로 정의해야 함

int a[7] = {1,2,3,4,5,6,7};
sort(a, a+7, cmp);

* 주의 사항
1. 비교함수는 두 값이 같을 때(혹은 우선순위가 같을 때) 반드시 false를 반환해야 함
 이렇게 안하면 sort함수에서 run time error 가 발생할 수 있다.



2. 비교 함수의 인자로 stl혹은 클래스 객체를 전달 시 reference를 사용

문자열을 받아서 끝자리의 알파벳 순으로 정렬하고 싶다고 하자

bool cmp(string a, string b){
    return a.back() < b.back();
}

되긴 하는데 바람직하지 않음 -> why? 구조체 객체나 stl을 실어서 보내면 객체의 복사가 일어남.
                            굳이 복사가 필요없으면 이렇게 하지 말자
                            -> reference를 전달

bool cmp(const string &a, const string& b){
    return a.back() < b.back();
}       